'''
Client
'''

import socket
import sys
from random import uniform as uf
from time import sleep as sp
from utils import ADDR, clear, decode, encode, printc, timestamp, User


# redacted message
def redacted(file: str) -> None:
  '''
  prints a message saying {file} is above your clearance
  art by ChatGPT
  '''
  lines = [
      "╔══════════════════════════════╗",
      "║        ACCESS DENIED         ║",
      "╚══════════════════════════════╝",
      "",
      f"FILE_REF: {file} ACCESS DENIED",
      "CLEARANCE LEVEL 6 - COSMIC TOP SECRET REQUIRED",
      "(YOU ARE CLEARANCE LEVEL 5 - TOP SECRET)",
      f"Logged to Overwatch Command at {timestamp()}",
  ]

  [printc(line) for line in lines]

# data expunged message
def expunged(file: str) -> None:
  '''
  prints a message saying {file} has been expunged
  art by ChatGPT
  '''
  lines = [
      "╔══════════════════════════════╗",
      "║        DATA EXPUNGED         ║",
      "╚══════════════════════════════╝",
      "",
      f"FILE_REF: {file} NOT FOUND",
      f"Logged to Overwatch Command at {timestamp()}",
  ]

  [printc(line) for line in lines]

# access granted message
def granted(file: str) -> None:
  '''
  prints a message saying access has been granted to a file
  art by ChatGPT
  '''
  lines = [
      "╔══════════════════════════════╗",
      "║        ACCESS GRANTED        ║",
      "╚══════════════════════════════╝",
      "",
      f"FILE_REF: {file} ACCESS GRANTED",
      f"Logged to Overwatch Command at {timestamp()}",
  ]

  [printc(line) for line in lines]

def conn_to_server(addr: tuple) -> socket.socket:
    '''
    Establishes connection to server
    '''
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect(addr) # connect to server
    print("Connected . . .")
    return s


def auth_usr(s: socket.socket, id: int, password: str) -> tuple[bool, User | None]:
    '''
    Authenticates a user with id and password
    assuming a connection on s
    '''
    s.sendall(encode(f"AUTH {id} {password}")) # try to auth user
    print("Auth sent . . .")
    result = s.recv(1024) # receive reply from server

    if not result: # no data, some error happened
        print("Server did respond")
        return False, None

    result = decode(result) # decode it

    if result == False:
        print("Incorrect id or password")
        return False, None
    else:
        print("User Authenticated")
        return True, result[1]

def startup() -> None:
    '''
    Prints a fancy startup screen
    (Ascii art generated by ChatGPT & patorjk.com/software/taag/ Font: ANSI Shadow)
    '''
    clear()

    # main terminal screen
    print()
    printc("███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀")
    printc("███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████")
    printc("██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██")
    print()
    printc("███████╗ ██████╗██████╗     ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗  █████╗ ████████╗██╗ ██████╗ ███╗   ██╗")
    printc("██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║")
    printc("███████╗██║     ██████╔╝    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║")
    printc("╚════██║██║     ██╔═══╝     ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║")
    printc("███████║╚██████╗██║         ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║")
    printc("╚══════╝ ╚═════╝╚═╝         ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝")
    printc("Secure | Contain | Protect")
    print()
    printc("— [ ACCESS PORTAL: SCiPNET TERMINAL v7.23.4 ] —")
    printc("██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██")
    printc("███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████")
    printc("███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄")
    print()

    sp(uf(0, 1)) # simulate loading time
    printc("> Establishing encrypted tunnel to Deepwell Servers . . .")
    sp(uf(0, 1))
    printc("> Syncing with Overwatch Command . . .")
    sp(uf(0, 1))
    printc("> Validating cryptographic token . . .")
    sp(uf(0, 1))
    printc("> SCiPNET interface launch sequence initiated . . .")
    sp(uf(0, 1))
    printc("SCP Foundation CoreNode Connection: STABLE")
    sp(uf(0, 1))
    printc("[The Foundation database is CLASSIFIED]")
    printc("[Unauthorized access will result in detainment]")
    print()

if __name__ == "__main__":
    with conn_to_server(ADDR) as conn:
        startup()  # print startup screen
        id = int(input("ID: "))
        password = input("Password: ")

        valid, usr = auth_usr(conn, id, password)
        if not valid:
            sys.exit("Authentication failed")