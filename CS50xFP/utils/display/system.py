"""
System display functions

Included in *:
- startup()
- login()

Excluded from *:
- all imports
- sim_load()
"""

from .helpers import clear, printc, print_lines
from .config import SIZE

from ..__init__ import __version__
from ..sql.models import Models

from time import sleep
from random import expovariate, uniform, choice

def sim_load() -> None:
    """
    Simulates loading for `startup()` bc it's cool

    Organic timing logic by ChatGPT
    """
    base_lines = [
        ('> Establishing encrypted tunnel to Deepwell Servers', 0.2, 0.5),
        ('> Syncing with Recordkeeping And Information Security Administration (RAISA)', 0.3, 0.7),
        ('> Validating cryptographic token', 0.8, 1.4),
        ('> SCiPNET interface launch sequence initiated', 0.4, 0.9)
    ]


    for line, min_t, max_t in base_lines:
        t = expovariate(2)
        sleep(t)

        printc(line, end='', flush=True)

        for _ in range(3):
            t = uniform(min_t, max_t)
            sleep(t)

            line += ' .'
            print('\r' + line.center(SIZE), end='', flush=True)

        # occasional hiccup for 'lag'
        if choice([True, False, False, False]):
            t = uniform(1, 2.5)
            sleep(t)


    sleep(0.25)
    print('\n')


def startup() -> None:
    """
    Prints a fancy startup screen

    (Ascii art generated by ChatGPT & patorjk.com/software/taag/ Font: ANSI Shadow)
    """
    clear()

    # main terminal screen
    print_lines([
        '',
        '███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀',
        '███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████',
        '██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██',
        '',
        '███████╗ ██████╗██████╗     ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗  █████╗ ████████╗██╗ ██████╗ ███╗   ██╗',
        '██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║',
        '███████╗██║     ██████╔╝    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║',
        '╚════██║██║     ██╔═══╝     ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║',
        '███████║╚██████╗██║         ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║',
        '╚══════╝ ╚═════╝╚═╝         ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝',
        'Secure | Contain | Protect',
        '',
        f'— [ ACCESS PORTAL: SCiPNET TERMINAL v{__version__} ] —',
        '██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██',
        '███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████',
        '███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄',
        '',
        ''
    ])

    # simulate loading (bc it's cool)
    sim_load()
    print_lines([
        'SCP Foundation CoreNode Connection: STABLE',
        '',
        '[The Foundation database is CLASSIFIED]',
        '[Unauthorized access will result in detainment]',
        ''
    ])


def login(usr: Models.User) -> None:
    """
    prints fancy login messages when
    a user logs in.

    Art by ChatGPT
    """
    # lines we'll use a few times
    reused1 = '/' * 4 + ' ' * 112 + '/' * 4
    reused2 = '/' * 120
    title = usr.title.name

    # set lines depending on usr title
    if title == 'O5 Council Member':
        lines = [
            '',
            reused2,
            reused1,
            '////' + f'{'<< O5 AUTHORIZATION VERIFIED >>':^112}' + '////',
            reused1,
            '////' + f'{'CLEARANCE LEVEL: 6 - COSMIC TOP SECRET':^112}' + '////',
            reused1,
            '////' + f'{f'Welcome back, {usr.name}.':^112}' + '////',
            '////' + f'{f'This session is being logged by CoreNode Zero.':^112}' + '////',
            reused1,
            '////' + f'{'SYSTEM STATUS: OPERATIONAL | DEEPWELL CHANNEL ENCRYPTED':^112}' + '////',
            reused1,
            reused2,
            '',
        ]

    elif title == 'Site Director':
        lines = [
            '',
            reused2,
            reused1,
            '////' + f'{'<< DIRECTOR AUTHORIZATION VERIFIED >>':^112}' + '////',
            reused1,
            '////' + f'{'CLEARANCE LEVEL: 5 - TOP SECRET':^112}' + '////',
            reused1,
            '////' + f'{f'Welcome back, {usr.name}.':^112}' + '////',
            '////' + f'{'All actions are recorded and reviewed by O5 Liaison - Node Black':^112}' + '////',
            reused1,
            '////' + f'{'SYSTEM STATUS: OPERATIONAL | DEEPWELL CHANNEL ENCRYPTED':^112}' + '////',
            reused1,
            reused2,
            '',
        ]

    elif title == 'Administrator':
        lines = [
            '',
            reused2,
            reused1,
            '////' + f'{'<< ADMINISTRATOR AUTHORIZATION VERIFIED >>':^112}' + '////',
            reused1,
            '////' + f'{'CLEARANCE LEVEL: UNBOUNDED | OVERRIDE: UNIVERSAL | LOGGING: DISABLED':^112}' + '////',
            reused1,
            '////' + f'{'Welcome, Administrator. All systems stand by for your instruction.':^112}' + '////',
            '////' + f'{'There are no restrictions. There are no records.':^112}' + '////',
            reused1,
            '////' + f'{'SYSTEM STATUS: OPERATIONAL | DEEPWELL CHANNEL ENCRYPTED | ENCLAVE MODE ACTIVE':^112}' + '////',
            reused1,
            reused2,
            '',
        ]

    else:
        lines = [
            '',
            f'Welcome back, {title} {usr.name}',
            f'(Clearance {usr.clearance_lvl.name})',
            '',
        ]

    print_lines(lines)



__all__ = [
    'startup',
    'login'
]
