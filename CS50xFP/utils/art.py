
from os import get_terminal_size as gts
from urllib.parse import unquote
from rich.markdown import Markdown
from rich.console import Console
from time import sleep as sp
from random import uniform as uf

from .basic import clear, timestamp
from .sql import init_scp, User, SCP, get_name

# disable markdown_it logging
import logging
logging.getLogger("markdown_it").setLevel(logging.WARNING)

# for typdefing
from typing import Any

''' Validate terminal size '''
try:
    SIZE = gts().columns
except OSError:
    SIZE = 120 # type: ignore

if SIZE < 120:
    raise Exception(f"Requires terminal size of 120 columns (current size {SIZE})")


def printc(string: str) -> None:
  '''
  prints {string} centered to the terminal size
  '''
  print(f"{string:^{SIZE}}")

def print_lines(lines: list[str]) -> None:
    '''
    printc's all lines provided
    '''
    for line in lines:
        printc(line)

def startup() -> None:
    '''
    Prints a fancy startup screen

    (Ascii art generated by ChatGPT & patorjk.com/software/taag/ Font: ANSI Shadow)
    '''
    clear()

    # main terminal screen
    print()
    printc("███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀")
    printc("███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████")
    printc("██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██")
    print()
    printc("███████╗ ██████╗██████╗     ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗  █████╗ ████████╗██╗ ██████╗ ███╗   ██╗")
    printc("██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║")
    printc("███████╗██║     ██████╔╝    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║")
    printc("╚════██║██║     ██╔═══╝     ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║")
    printc("███████║╚██████╗██║         ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║")
    printc("╚══════╝ ╚═════╝╚═╝         ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝")
    printc("Secure | Contain | Protect")
    print()
    printc("— [ ACCESS PORTAL: SCiPNET TERMINAL v7.23.4 ] —")
    printc("██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██")
    printc("███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████")
    printc("███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄")
    print()

    # simulate loading (bc it's cool)
    sp(uf(0, 1))
    printc("> Establishing encrypted tunnel to Deepwell Servers . . .")
    sp(uf(0, 1))
    printc("> Syncing with Recordkeeping And Information Security Administration (RAISA) . . .")
    sp(uf(0, 1))
    printc("> Validating cryptographic token . . .")
    sp(uf(0, 1))
    printc("> SCiPNET interface launch sequence initiated . . .")
    sp(uf(0, 1))
    printc("SCP Foundation CoreNode Connection: STABLE")
    print()
    sp(uf(0, 1))
    printc("[The Foundation database is CLASSIFIED]")
    printc("[Unauthorized access will result in detainment]")
    print()


def login(usr: User) -> None:
    '''
    prints fancy login messages when
    a user logs in.

    Art by ChatGPT
    '''
    # lines we'll use a few times
    reused1 = "/" * 4 + " " * 112 + "/" * 4
    reused2 = "/" * 120
    title = get_name("titles", usr.title_id)

    # set lines depending on usr title
    if title == "O5 Council Member":
        lines = [
            "",
            reused2,
            reused1,
            "////" + f"{'<< O5 AUTHORIZATION VERIFIED >>':^112}" + "////",
            reused1,
            "////" + f"{'CLEARANCE LEVEL: 6 - COSMIC TOP SECRET':^112}" + "////",
            reused1,
            "////" + f"{f'Welcome back, {usr.name}.':^112}" + "////",
            "////" + f"{f'This session is being logged by CoreNode Zero.':^112}" + "////",
            reused1,
            "////" + f"{'SYSTEM STATUS: OPERATIONAL | DEEPWELL CHANNEL ENCRYPTED':^112}" + "////",
            reused1,
            reused2,
            "",
        ]

    elif title == "Site Director":
        lines = [
            "",
            reused2,
            reused1,
            "////" + f"{'<< DIRECTOR AUTHORIZATION VERIFIED >>':^112}" + "////",
            reused1,
            "////" + f"{'CLEARANCE LEVEL: 5 - TOP SECRET':^112}" + "////",
            reused1,
            "////" + f"{f'Welcome back, {usr.name}.':^112}" + "////",
            "////" + f"{'All actions are recorded and reviewed by O5 Liaison - Node Black':^112}" + "////",
            reused1,
            "////" + f"{'SYSTEM STATUS: OPERATIONAL | DEEPWELL CHANNEL ENCRYPTED':^112}" + "////",
            reused1,
            reused2,
            "",
        ]

    elif title == "Administrator":
        lines = [
            "",
            reused2,
            reused1,
            "////" + f"{'<< ADMINISTRATOR AUTHORIZATION VERIFIED >>':^112}" + "////",
            reused1,
            "////" + f"{'CLEARANCE LEVEL: UNBOUNDED | OVERRIDE: UNIVERSAL | LOGGING: DISABLED':^112}" + "////",
            reused1,
            "////" + f"{'Welcome, Administrator. All systems stand by for your instruction.':^112}" + "////",
            "////" + f"{'There are no restrictions. There are no records.':^112}" + "////",
            reused1,
            "////" + f"{'SYSTEM STATUS: OPERATIONAL | ENCLAVE MODE ACTIVE':^112}" + "////",
            reused1,
            reused2,
            "",
        ]

    else:
        lines = [
            "",
            f"Welcome back, {title} {usr.name}",
            f"(Clearance Level {usr.clearance_level_id} - {get_name('clearance_levels', usr.clearance_level_id)})"
            "",
        ]

    print_lines(lines)


def redacted(file: str, file_classification: int, clearance: int) -> None:
    '''
    prints a message saying {file} is above your clearance

    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║        ACCESS DENIED         ║",
        "╚══════════════════════════════╝",
        "",
        f"FILE_REF: {file} REDACTED",
        f"CLEARANCE {get_name('clearance_levels', file_classification).upper()} REQUIRED",
        f"(YOU ARE CLEARANCE {get_name('clearance_levels', clearance).upper()})",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])

def expunged(file: str) -> None:
    '''
    prints a message saying {file} has been expunged

    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║        DATA EXPUNGED         ║",
        "╚══════════════════════════════╝",
        "",
        f"FILE_REF: {file} NOT FOUND",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])

def granted(file: str) -> None:
    '''
    prints a message saying access has been granted to a file

    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║        ACCESS GRANTED        ║",
        "╚══════════════════════════════╝",
        "",
        f"FILE_REF: {file} ACCESS GRANTED",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])


def create_f(f_type: str) -> None:
    '''
    Prints a simple message for file creation

    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║         FILE CREATION        ║",
        "╚══════════════════════════════╝",
        "",
        f"{f_type}",
        "",
    ])

def clearance_denied(needed_c: int, usr_c: int) -> None:
    '''
    Tells the usr they have insufficient clearance for file creation

    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║     INSUFFICIENT CLEARANCE   ║",
        "╚══════════════════════════════╝",
        ""
        f"CLEARANCE {get_name('clearance_levels', needed_c).upper()} REQUIRED TO CREATE FILE",
        f"(YOU ARE CLEARANCE {get_name('clearance_levels', usr_c).upper()})",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])

def invalid_f_type(f_type: str) -> None:
    '''
    Tells a user that {f_type} is not a valid f_type
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        f"║{'INVALID FILE TYPE':^30}║",
        "╚══════════════════════════════╝",
        ""
        f"{f_type.upper()} IS NOT A VALID FILE TYPE",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])

def invalid_f_data() -> None:
    '''
    Tells a user that the file data is invalid
    '''
    print_lines([
        "",
        "╔════════════════════════════════════════╗",
        "║            INVALID FILE DATA           ║",
        "╚════════════════════════════════════════╝",
        "",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])

def no_data_recvd() -> None:
    '''
    Tells a user that the server received no data

    Art by ChatGPT
    '''
    print_lines([
        "",
        "╔════════════════════════════════════════╗",
        f"║{'SERVER RECEIVED NO DATA':^40}║",
        "╚════════════════════════════════════════╝",
        "",
        "CONTACT YOUR SITE NETWORK ADMINISTRATOR IF ISSUES PERSIST",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])

def no_response() -> None:
    '''
    Tells usr that no response was received from the server

    art by ChatGPT, formatting by me
    '''
    print_lines([
        "",
        "╔════════════════════════════════════════╗",
        f"║{'ERROR: NO RESPONSE FROM':^40}║",
        "║                DEEPWELL                ║",
        "╚════════════════════════════════════════╝",
        "",
        "PLEASE TRY AGAIN",
        "CONTACT YOUR SITE NETWORK ADMINISTRATOR IF ISSUES PERSIST",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])

def created_f(f_type: str) -> None:
    '''
    prints a message saying a file was successfully created

    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║            CREATED           ║",
        "╚══════════════════════════════╝",
        "",
        f"{f_type} INITIALIZED",
        f"Logged to RAISA at {timestamp()}",
        "",
    ])


def acs_bar(scp_info: SCP) -> None:
    '''
    prints a ACS header for an scp article

    art by ChatGPT
    '''
    print_lines([
    "",
    "┌──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐",
    f"│{f'Item #: SCP-{scp_info.id}':^58}||{f'Classification Level: {scp_info.classification_level}':^58}|",
    "├──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤",
    f"│{f'Containment Class: {scp_info.containment_class}':^58}||{f'Disruption Class: {scp_info.disruption_class}':^58}|",
    f"│{f'Secondary Class: {scp_info.secondary_class}':^58}||{f'Risk Class: {scp_info.risk_class}':^58}|",
    f"├──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┤",
    f"│{f'Site Responsible: {scp_info.site_responsible_id}':^58}||{f'Assigned Task Force: {scp_info.assigned_task_force_name}':^58}|",
    "└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘",
    "",
    ])

def display_scp(data: dict[str, Any], console: Console) -> None:
    '''
    Displays a scp after requested by user
    '''
    scp_info = init_scp(data["db_info"])
    descs: dict[str, str] = data["descs"]
    SCPs: dict[str, str] = data["SCPs"]
    addenda: dict[str, str] = data["addenda"]

    # print scp_info
    acs_bar(scp_info)

    # print Special Containment Procedures
    md = Markdown(f"## Special Containment Procedures:\n\n{SCPs['main.md']}")
    console.print(md)

    # print description
    md = Markdown(f"## Description:\n\n{descs['main.md']}")
    console.print(md)

    # allow other file showing
    if addenda:
        a_names: list[str] = [key.replace(".md","") for key in addenda.keys()]
    else:
        a_names = []
    desc_names: list[str] = [key.replace(".md","") for key in descs.keys()]
    SCP_names: list[str] = [key.replace(".md","") for key in SCPs.keys()]

    while True: # always offer more addenda after file access

        # make type checking happy
        i = 0
        j = 0
        k = 0
        print("Display additional addenda?")
        # first, addenda
        for i, name in enumerate(a_names):
            print(f"{i}: {unquote(name)}") # name is fname, so quoted
        
        # then descs
        if len(desc_names) > 1: # ensure there are other descs
            for j, name in enumerate(desc_names, 1):
                # skip main
                if name == "main":
                    continue
                # continue indexing from i
                print(f"{j+i}: {unquote(name)}")

        # finally SCPs
        if len(SCP_names) > 1:
            for k, name in enumerate(SCP_names):
                if name == "main":
                    continue
                # continue indexing
                print(f"{k+j+i}: {unquote(name)}")

        print("C: close file")

        inp = input("> ")

        # process decesion
        try:
            if inp.upper() == "C":
                return
            else:
                # what are they accessing
                idx = int(inp)

                # addenda?
                if idx <= i:
                    # access file
                    name = a_names[idx]
                    md = Markdown(f"## {unquote(name)}\n\n{addenda[name]}")
                    console.print(md)
                    # don't offer it again
                    a_names.pop(idx)
                
                # desc?
                elif idx <= j+i:
                    # access file
                    name = desc_names[idx-i-1]
                    md = Markdown(f"## {unquote(name)}\n\n{addenda[name]}")
                    console.print(md)
                    # don't offer it again
                    a_names.remove(name)

                # SCP?
                elif idx <= k+j+i:
                    # access file
                    name = SCP_names[idx-i-j-1]
                    md = Markdown(f"## {unquote(name)}\n\n{addenda[name]}")
                    console.print(md)
                    # don't offer it again
                    a_names.remove(name)

        except ValueError or IndexError:
            print(f"INVALID CHOICE: {inp!r}")
