
from os import get_terminal_size as gts
from urllib.parse import unquote
from rich.markdown import Markdown
from rich.console import Console
from time import sleep as sp
from random import uniform as uf

from .basic import clear, timestamp, Unknown
from .sql import init_scp, User, SCP, get_name

''' Validate terminal size '''
try:
    SIZE = gts().columns
except OSError:
    SIZE = 120 # type: ignore

if SIZE < 120:
    raise Exception(f"Requires terminal size of 120 columns (current size {SIZE})")


def printc(string: str) -> None:
  '''
  prints {string} centered to the terminal size
  '''
  print(f"{string:^{SIZE}}")

def print_lines(lines: list[str]) -> None:
    for line in lines:
        printc(line)

def startup() -> None:
    '''
    Prints a fancy startup screen\n
    (Ascii art generated by ChatGPT & patorjk.com/software/taag/ Font: ANSI Shadow)
    '''
    clear()

    # main terminal screen
    print()
    printc("███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀▀▀▀███▀")
    printc("███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████")
    printc("██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██")
    print()
    printc("███████╗ ██████╗██████╗     ███████╗ ██████╗ ██╗   ██╗███╗   ██╗██████╗  █████╗ ████████╗██╗ ██████╗ ███╗   ██╗")
    printc("██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔═══██╗██║   ██║████╗  ██║██╔══██╗██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║")
    printc("███████╗██║     ██████╔╝    █████╗  ██║   ██║██║   ██║██╔██╗ ██║██║  ██║███████║   ██║   ██║██║   ██║██╔██╗ ██║")
    printc("╚════██║██║     ██╔═══╝     ██╔══╝  ██║   ██║██║   ██║██║╚██╗██║██║  ██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║")
    printc("███████║╚██████╗██║         ██║     ╚██████╔╝╚██████╔╝██║ ╚████║██████╔╝██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║")
    printc("╚══════╝ ╚═════╝╚═╝         ╚═╝      ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝")
    printc("Secure | Contain | Protect")
    print()
    printc("— [ ACCESS PORTAL: SCiPNET TERMINAL v7.23.4 ] —")
    printc("██ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░░ ██")
    printc("███████▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓███████")
    printc("███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄▄▄▄███▄")
    print()

    # simulate loading (bc it's cool)
    sp(uf(0, 1))
    printc("> Establishing encrypted tunnel to Deepwell Servers . . .")
    sp(uf(0, 1))
    printc("> Syncing with Overwatch Command . . .")
    sp(uf(0, 1))
    printc("> Validating cryptographic token . . .")
    sp(uf(0, 1))
    printc("> SCiPNET interface launch sequence initiated . . .")
    sp(uf(0, 1))
    printc("SCP Foundation CoreNode Connection: STABLE")
    print()
    sp(uf(0, 1))
    printc("[The Foundation database is CLASSIFIED]")
    printc("[Unauthorized access will result in detainment]")
    print()


def login(usr: User) -> None:
    '''
    prints fancy login messages when
    a user logs in.\n
    Art by ChatGPT
    '''
    reused1 = "/" * 4 + " " * 112 + "/" * 4
    reused2 = "/" * 120
    title = get_name("titles", usr.title_id)

    if title == "O5 Council Member":
        lines = [
            reused2,
            reused1,
            "////" + f"{'<< O5 AUTHORIZATION VERIFIED >>':^112}" + "////",
            reused1,
            "////" + f"{'CLEARANCE LEVEL: 6 - COSMIC TOP SECRET':^112}" + "////",
            reused1,
            "////" + f"{f'Welcome back, {usr.name}.':^112}" + "////",
            "////" + f"{f'This session is being logged by CoreNode Zero.':^112}" + "////",
            reused1,
            "////" + f"{'SYSTEM STATUS: OPERATIONAL | DEEPWELL CHANNEL ENCRYPTED':^112}" + "////",
            reused1,
            reused2,
        ]

    elif title == "Site Director":
        lines = [
            reused2,
            reused1,
            "////" + f"{'<< DIRECTOR AUTHORIZATION VERIFIED >>':^112}" + "////",
            reused1,
            "////" + f"{'CLEARANCE LEVEL: 5 - TOP SECRET':^112}" + "////",
            reused1,
            "////" + f"{f'Welcome back, {usr.name}.':^112}" + "////",
            "////" + f"{'All actions are recorded and reviewed by O5 Liaison - Node Black':^112}" + "////",
            reused1,
            "////" + f"{'SYSTEM STATUS: OPERATIONAL | DEEPWELL CHANNEL ENCRYPTED':^112}" + "////",
            reused1,
            reused2,
        ]

    elif title == "Administrator":
        lines = [
            reused2,
            reused1,
            "////" + f"{'<< ADMINISTRATOR AUTHORIZATION VERIFIED >>':^112}" + "////",
            reused1,
            "////" + f"{'CLEARANCE LEVEL: UNBOUNDED | OVERRIDE: UNIVERSAL | LOGGING: DISABLED':^112}" + "////",
            reused1,
            "////" + f"{'Welcome, Administrator. All systems stand by for your instruction.':^112}" + "////",
            "////" + f"{'There are no restrictions. There are no records.':^112}" + "////",
            reused1,
            "////" + f"{'SYSTEM STATUS: OPERATIONAL | ENCLAVE MODE ACTIVE':^112}" + "////",
            reused1,
            reused2,
        ]

    else:
        lines = [
            f"Welcome back, {title} {usr.name}",
            f"(Clearance Level {usr.clearance_level_id} - {get_name('clearance_levels', usr.clearance_level_id)})"
        ]

    for line in lines:
        printc(line)


def redacted(file: str, file_classification: int, clearance: int) -> None:
    '''
    prints a message saying {file} is above your clearance\n
    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║        ACCESS DENIED         ║",
        "╚══════════════════════════════╝",
        "",
        f"FILE_REF: {file} REDACTED",
        f"CLEARANCE {get_name('clearance_levels', file_classification).upper()} REQUIRED",
        f"(YOU ARE CLEARANCE {get_name('clearance_levels', clearance).upper()})",
        f"Logged to Overwatch Command at {timestamp()}",
    ])

def expunged(file: str) -> None:
    '''
    prints a message saying {file} has been expunged\n
    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║        DATA EXPUNGED         ║",
        "╚══════════════════════════════╝",
        "",
        f"FILE_REF: {file} NOT FOUND",
        f"Logged to Overwatch Command at {timestamp()}",
    ])

def granted(file: str) -> None:
    '''
    prints a message saying access has been granted to a file\n
    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║        ACCESS GRANTED        ║",
        "╚══════════════════════════════╝",
        "",
        f"FILE_REF: {file} ACCESS GRANTED",
        f"Logged to Overwatch Command at {timestamp()}",
    ])


def create_f(f_type: str) -> None:
    '''
    Prints a simple message for file creation\n
    art by ChatGPT
    '''
    print_lines([
        "",
        "╔══════════════════════════════╗",
        "║         FILE CREATION        ║",
        "╚══════════════════════════════╝",
        "",
        f"CREATE {f_type}",
    ])

def clearance_denied(needed_c: int, usr_c: int) -> None:
    '''
    Tells the usr they have insufficient clearance for an operation\n
    art by ChatGPT
    '''
    print_lines([
        "╔══════════════════════════════╗",
        "║     INSUFFICIENT CLEARANCE   ║",
        "╚══════════════════════════════╝",
        ""
        f"CLEARANCE {get_name('clearance_levels', needed_c).upper()} REQUIRED",
        f"(YOU ARE CLEARANCE {get_name('clearance_levels', usr_c).upper()})",
        f"Logged to Overwatch Command at {timestamp()}",
    ])

def invalid_f_type(f_type: str) -> None:
    '''
    Tells a user that {f_type} is not a valid f_type
    '''
    print_lines([
        "╔══════════════════════════════╗",
        f"║{'INVALID FILE TYPE':^30}║",
        "╚══════════════════════════════╝",
        ""
        f"{f_type.upper()} IS NOT A VALID FILE TYPE",
        f"Logged to Overwatch Command at {timestamp()}",
    ])

def invalid_f_data() -> None:
    '''
    Tells a user that the file data is invalid
    '''
    print_lines([
        "╔════════════════════════════════════════╗",
        "║            INVALID FILE DATA           ║",
        "╚════════════════════════════════════════╝",
        "",
        f"Logged to Overwatch Command at {timestamp()}",
    ])

def no_data_recvd() -> None:
    '''
    Tells a user that the server received no data\n
    Art by ChatGPT
    '''
    print_lines([
        "╔════════════════════════════════════════╗",
        f"║{'SERVER RECEIVED NO DATA':^40}║",
        "╚════════════════════════════════════════╝",
        "",
        "CONTACT YOUR SITE NETWORK ADMINISTRATOR IF ISSUES PERSIST",
        f"Logged to Overwatch Command at {timestamp()}",
    ])

def no_response() -> None:
    '''
    Tells usr that no response was received from the deepwell\n
    art by ChatGPT, formatting by me
    '''
    print_lines([
        "",
        "╔════════════════════════════════════════╗",
        f"║{'ERROR: NO RESPONSE FROM':^40}║",
        "║                DEEPWELL                ║",
        "╚════════════════════════════════════════╝",
        "",
        "PLEASE TRY AGAIN",
        "CONTACT YOUR SITE NETWORK ADMINISTRATOR IF ISSUES PERSIST",
        f"Logged to Overwatch Command at {timestamp()}",
    ])

def created_f(f_type: str) -> None:
    print_lines([
        "╔══════════════════════════════╗",
        "║            CREATED           ║",
        "╚══════════════════════════════╝",
        "",
        f"{f_type} INITIALIZED",
        f"Logged to Overwatch Command at {timestamp()}",

        except ValueError | IndexError:
            print(f"INVALID CHOICE: {inp!r}")